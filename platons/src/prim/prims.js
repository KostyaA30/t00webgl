import { model } from "./models.js";
import { vec4 } from "../mth/vec4.js";
import { vec3 } from "../mth/vec3.js";

let primitivies = {};

primitivies.cubeBad = class cubeBad {
    static createModel(gl) {
        return model(this.createMesh(gl));
    }
    static createMesh(gl) {
        let aVert = [
            -0.5,  0.5,  0, 0, -0.5, -0.5,  0, 0,
             0.5, -0.5,  0, 0,  0.5,  0.5,  0, 0,
             0.5,  0.5, -1, 1,  0.5, -0.5, -1, 1,
            -0.5, -0.5, -1, 1, -0.5,  0.5, -1, 1],
            aUV = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            aIndex = [
                0, 1, 2, 2, 3, 0, 4, 5,
                6, 6, 7, 4, 3, 2, 5, 5,
                4, 3, 7, 0, 3, 3, 4, 7,
                7, 6, 1, 1, 0, 7];
        return gl.fCreateMeshVAO("cubeBad", aIndex, aVert, null, aUV, 4);
    }
};

primitivies.cube = class {
    static createModel(gl, name, keepRawData) {
        return model(primitivies.cube.createMesh(gl, name || "cube", 1, 1, 1, 0, 0, 0, keepRawData));
    }
    static createMesh(gl, name, width, height, depth, x, y, z, keepRawData) {
        let w = width * 0.5,
            h = height * 0.5,
            d = depth * 0.5;
        let x0 = x - w,
            x1 = x + w,
            y0 = y - h,
            y1 = y + h,
            z0 = z - d,
            z1 = z + d;

        let aVert = [
            x0, y1, z1, 0,  x0, y0, z1, 0,  x1, y0, z1, 0,  x1, y1, z1, 0,
            x1, y1, z0, 1,  x1, y0, z0, 1,  x0, y0, z0, 1,  x0, y1, z0, 1,
            x0, y1, z0, 2,  x0, y0, z0, 2,  x0, y0, z1, 2,  x0, y1, z1, 2,
            x0, y0, z1, 3,  x0, y0, z0, 3,  x1, y0, z0, 3,  x1, y0, z1, 3,
            x1, y1, z1, 4,  x1, y0, z1, 4,  x1, y0, z0, 4,  x1, y1, z0, 4,
            x0, y1, z0, 5,  x0, y1, z1, 5,  x1, y1, z1, 5,  x1, y1, z0, 5,
        ];

        let aIndex = [];
        for (let i = 0; i < aVert.length / 4; i += 2) {
            aIndex.push(i, i + 1, Math.floor(i / 4) * 4 + ((i + 2) % 4));
        }

        let aColor = [
            x0, y1, z1,  x0, y0, z1,  x1, y0, z1,  x1, y1, z1,
            x1, y1, z0,  x1, y0, z0,  x0, y0, z0,  x0, y1, z0,
            x0, y1, z0,  x0, y0, z0,  x0, y0, z1,  x0, y1, z1,
            x0, y0, z1,  x0, y0, z0,  x1, y0, z0,  x1, y0, z1,
            x1, y1, z1,  x1, y0, z1,  x1, y0, z0,  x1, y1, z0,
            x0, y1, z0,  x0, y1, z1,  x1, y1, z1,  x1, y1, z0,
        ];

        let aUV = [];

        for (let i = 0; i < 6; i++) {
            aUV.push(0, 0, 0, 1, 1, 1, 1, 0);
        }

        let aNorm = [
            0,  0, 1, 0,   0,  1, 0,  0,   1, 0, 0,  1,  0, 0, -1, 0,
            0, -1, 0, 0,  -1,  0, 0, -1,  -1, 0, 0, -1,  0, 0, -1, 0,
            0, -1, 0, 0,   0, -1, 0,  0,  -1, 0, 0, -1,  0, 0, -1, 0,
            1,  0, 0, 1,   0,  0, 1,  0,   0, 1, 0,  0,  0, 1,  0, 0,
            1,  0, 0, 1,   0,  0, 1,  0];

        aColor = aNorm;

        let mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aColor, aNorm, aUV, 4);
        mesh.noCulling = true;

        if (keepRawData) {
            mesh.aIndex = aIndex;
            mesh.aVert = aVert;
            mesh.aNorm = aNorm;
        }

        return mesh;
    }
};

primitivies.tetrahedron = class tetrahedron {
    static createModel(gl, name, keepRawData) {
        return model(primitivies.tetrahedron.createMesh(gl, name || "tetrahedron", 1, 1, 1, 0, 0, 0, keepRawData));
    }
    static createMesh(gl, name, radius, keepRawData) {
        let v0 = [0, radius, 0],
            v1 = [0, -radius * 0.333, radius * 0.943],
            v2 = [radius * 0.816, -radius * 0.333, -radius * 0.471],
            v3 = [-radius * 0.816, -radius * 0.333, -radius * 0.471];

        let aVert = [
            ...v0, ...v1, ...v2,
            ...v1, ...v3, ...v2,
            ...v0, ...v2, ...v3,
            ...v0, ...v3, ...v1,
        ];

        let aColor = [
            ...v0, ...v1, ...v2,
            ...v1, ...v3, ...v2,
            ...v0, ...v2, ...v3,
            ...v0, ...v3, ...v1,
        ];

        let aIndex = [];

        let aNorm = [];

        let aUV = [];

        let mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aColor, aNorm, aUV, 3);
        mesh.noCulling = true;

        if (keepRawData) {
            mesh.aIndex = aIndex;
            mesh.aVert = aVert;
            mesh.aNorm = aNorm;
        }

        return mesh;
    }
};

primitivies.octahedron = class octahedron {
    static createModel(gl, name, keepRawData) {
        return model(primitivies.octahedron.createMesh(gl, name || "octahedron", 1, 1, 1, 0, 0, 0, keepRawData));
    }
    static createMesh(gl, name, radius, keepRawData) {
        let v0 = [      0, -radius,       0],
            v1 = [-radius,       0,       0],
            v2 = [      0,       0, -radius],
            v3 = [ radius,       0,       0],
            v4 = [      0,       0,  radius],
            v5 = [      0,  radius,       0];

        let aVert = [
            ...v0, ...v1, ...v2,
            ...v0, ...v2, ...v3,
            ...v0, ...v3, ...v4,
            ...v0, ...v4, ...v1,
            ...v5, ...v2, ...v1,
            ...v5, ...v3, ...v2,
            ...v5, ...v4, ...v3,
            ...v5, ...v1, ...v4,
        ];

        let aColor = [
            ...v0, ...v1, ...v2,
            ...v0, ...v2, ...v3,
            ...v0, ...v3, ...v4,
            ...v0, ...v4, ...v1,
            ...v5, ...v2, ...v1,
            ...v5, ...v3, ...v2,
            ...v5, ...v4, ...v3,
            ...v5, ...v1, ...v4,
        ];

        let aIndex = [];

        let aNorm = [];

        let aUV = [];

        let mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aColor, aNorm, aUV, 3);
        mesh.noCulling = true;

        if (keepRawData) {
            mesh.aIndex = aIndex;
            mesh.aVert = aVert;
            mesh.aNorm = aNorm;
        }

        return mesh;
    }
};

primitivies.dodecahedron = class dodecahedron {
    static createModel(gl, name, keepRawData) {
        return model(primitivies.dodecahedron.createMesh(gl, name || "dodecahedron", 1, 1, 1, 0, 0, 0, keepRawData));
    }
    static createMesh(gl, name, keepRawData) {
        let aVert = [
            5.000000e+001 - 10.0, 3.829179e+001 - 10.0, 7.236046e+000 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            3.886486e+001 - 10.0, 4.638198e+001 - 10.0, 7.236049e+000 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            3.886486e+001 - 10.0, 4.638198e+001 - 10.0, 7.236049e+000 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 6.649609e-008 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 6.649609e-008 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            5.000000e+001 - 10.0, 3.829179e+001 - 10.0, 7.236046e+000 - 10.0,
            4.412215e+001 - 10.0, 4.190984e+001 - 10.0, -1.963632e-006 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            5.688190e+001 - 10.0, 5.947212e+001 - 10.0, 7.236066e+000 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 6.649609e-008 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 6.649609e-008 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            5.688190e+001 - 10.0, 5.947212e+001 - 10.0, 7.236066e+000 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            4.311811e+001 - 10.0, 5.947213e+001 - 10.0, 7.236053e+000 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            4.311811e+001 - 10.0, 5.947213e+001 - 10.0, 7.236053e+000 - 10.0,
            5.000000e+001 - 10.0, 6.000000e+001 - 10.0, -1.068797e-006 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            6.113514e+001 - 10.0, 4.638197e+001 - 10.0, 7.236053e+000 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            5.000000e+001 - 10.0, 3.829179e+001 - 10.0, 7.236046e+000 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            6.113514e+001 - 10.0, 4.638197e+001 - 10.0, 7.236053e+000 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 6.649609e-008 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            5.587784e+001 - 10.0, 4.190984e+001 - 10.0, 0.000000e+000 - 10.0,
            3.886486e+001 - 10.0, 4.638198e+001 - 10.0, 7.236049e+000 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            4.311811e+001 - 10.0, 5.947213e+001 - 10.0, 7.236053e+000 - 10.0,
            4.048943e+001 - 10.0, 5.309017e+001 - 10.0, 5.271401e-008 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            5.688190e+001 - 10.0, 5.947212e+001 - 10.0, 7.236066e+000 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            6.113514e+001 - 10.0, 4.638197e+001 - 10.0, 7.236053e+000 - 10.0,
            5.951056e+001 - 10.0, 5.309017e+001 - 10.0, 3.312196e-006 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            5.943384e+001 - 10.0, 4.693476e+001 - 10.0, 8.130466e+000 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.943384e+001 - 10.0, 4.693476e+001 - 10.0, 8.130466e+000 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            4.416956e+001 - 10.0, 5.802491e+001 - 10.0, 8.130486e+000 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            5.583044e+001 - 10.0, 5.802491e+001 - 10.0, 8.130490e+000 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.583044e+001 - 10.0, 5.802491e+001 - 10.0, 8.130490e+000 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            4.416956e+001 - 10.0, 5.802491e+001 - 10.0, 8.130486e+000 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            5.583044e+001 - 10.0, 5.802491e+001 - 10.0, 8.130490e+000 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            5.000000e+001 - 10.0, 4.008067e+001 - 10.0, 8.130466e+000 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 2.000000e+000 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.943384e+001 - 10.0, 4.693476e+001 - 10.0, 8.130466e+000 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            4.416956e+001 - 10.0, 5.802491e+001 - 10.0, 8.130486e+000 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 4.008067e+001 - 10.0, 8.130466e+000 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 4.008067e+001 - 10.0, 8.130466e+000 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 2.000000e+000 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            4.056616e+001 - 10.0, 4.693477e+001 - 10.0, 8.130455e+000 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 2.000000e+000 - 10.0,
            5.805747e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 5.847213e+001 - 10.0, 2.000000e+000 - 10.0,
            4.056616e+001 - 10.0, 4.693477e+001 - 10.0, 8.130455e+000 - 10.0,
            4.194252e+001 - 10.0, 5.261803e+001 - 10.0, 2.000000e+000 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            5.000000e+001 - 10.0, 5.000000e+001 - 10.0, 2.000000e+000 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.497979e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            4.056616e+001 - 10.0, 4.693477e+001 - 10.0, 8.130455e+000 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            4.502020e+001 - 10.0, 4.314590e+001 - 10.0, 2.000000e+000 - 10.0,
            5.000000e+001 - 10.0, 3.829179e+001 - 10.0, 7.236046e+000 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            5.000000e+001 - 10.0, 3.829179e+001 - 10.0, 7.236046e+000 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            3.886486e+001 - 10.0, 4.638198e+001 - 10.0, 7.236049e+000 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            3.886486e+001 - 10.0, 4.638198e+001 - 10.0, 7.236049e+000 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            6.113514e+001 - 10.0, 4.638197e+001 - 10.0, 7.236053e+000 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            6.113514e+001 - 10.0, 4.638197e+001 - 10.0, 7.236053e+000 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            4.311811e+001 - 10.0, 5.947213e+001 - 10.0, 7.236053e+000 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            4.311811e+001 - 10.0, 5.947213e+001 - 10.0, 7.236053e+000 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            5.688190e+001 - 10.0, 5.947212e+001 - 10.0, 7.236066e+000 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            5.688190e+001 - 10.0, 5.947212e+001 - 10.0, 7.236066e+000 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            4.056616e+001 - 10.0, 4.693477e+001 - 10.0, 8.130455e+000 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            4.056616e+001 - 10.0, 4.693477e+001 - 10.0, 8.130455e+000 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            5.000000e+001 - 10.0, 4.008067e+001 - 10.0, 8.130466e+000 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            5.000000e+001 - 10.0, 4.008067e+001 - 10.0, 8.130466e+000 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            5.943384e+001 - 10.0, 4.693476e+001 - 10.0, 8.130466e+000 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            5.943384e+001 - 10.0, 4.693476e+001 - 10.0, 8.130466e+000 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            4.416956e+001 - 10.0, 5.802491e+001 - 10.0, 8.130486e+000 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            4.416956e+001 - 10.0, 5.802491e+001 - 10.0, 8.130486e+000 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            5.583044e+001 - 10.0, 5.802491e+001 - 10.0, 8.130490e+000 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            5.583044e+001 - 10.0, 5.802491e+001 - 10.0, 8.130490e+000 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            3.886489e+001 - 10.0, 5.361803e+001 - 10.0, 1.894422e+001 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            3.886489e+001 - 10.0, 5.361803e+001 - 10.0, 1.894422e+001 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            3.461161e+001 - 10.0, 5.499998e+001 - 10.0, 9.999980e+000 - 10.0,
            6.113513e+001 - 10.0, 5.361802e+001 - 10.0, 1.894423e+001 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            6.113513e+001 - 10.0, 5.361802e+001 - 10.0, 1.894423e+001 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            6.538839e+001 - 10.0, 5.499999e+001 - 10.0, 9.999994e+000 - 10.0,
            4.311813e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            5.688189e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            5.688189e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            5.951056e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            4.311813e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            4.048944e+001 - 10.0, 3.690984e+001 - 10.0, 1.000000e+001 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            5.000002e+001 - 10.0, 6.170817e+001 - 10.0, 1.894424e+001 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            5.000002e+001 - 10.0, 6.170817e+001 - 10.0, 1.894424e+001 - 10.0,
            5.000000e+001 - 10.0, 6.618032e+001 - 10.0, 1.000000e+001 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            4.416958e+001 - 10.0, 4.197509e+001 - 10.0, 1.804978e+001 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            4.416958e+001 - 10.0, 4.197509e+001 - 10.0, 1.804978e+001 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            4.194256e+001 - 10.0, 3.890988e+001 - 10.0, 1.047206e+001 - 10.0,
            5.583043e+001 - 10.0, 4.197509e+001 - 10.0, 1.804979e+001 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            5.583043e+001 - 10.0, 4.197509e+001 - 10.0, 1.804979e+001 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            5.805745e+001 - 10.0, 3.890987e+001 - 10.0, 1.047208e+001 - 10.0,
            4.056617e+001 - 10.0, 5.306525e+001 - 10.0, 1.804979e+001 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            4.056617e+001 - 10.0, 5.306525e+001 - 10.0, 1.804979e+001 - 10.0,
            3.696275e+001 - 10.0, 5.423606e+001 - 10.0, 1.047211e+001 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            5.943383e+001 - 10.0, 5.306524e+001 - 10.0, 1.804981e+001 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            5.943383e+001 - 10.0, 5.306524e+001 - 10.0, 1.804981e+001 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            6.303725e+001 - 10.0, 5.423605e+001 - 10.0, 1.047212e+001 - 10.0,
            5.000001e+001 - 10.0, 5.991932e+001 - 10.0, 1.804982e+001 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            5.000001e+001 - 10.0, 5.991932e+001 - 10.0, 1.804982e+001 - 10.0,
            5.000000e+001 - 10.0, 6.370818e+001 - 10.0, 1.047213e+001 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            4.416958e+001 - 10.0, 4.197509e+001 - 10.0, 1.804978e+001 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            4.056617e+001 - 10.0, 5.306525e+001 - 10.0, 1.804979e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            3.696277e+001 - 10.0, 4.576399e+001 - 10.0, 1.570811e+001 - 10.0,
            5.943383e+001 - 10.0, 5.306524e+001 - 10.0, 1.804981e+001 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            5.583043e+001 - 10.0, 4.197509e+001 - 10.0, 1.804979e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            6.303723e+001 - 10.0, 4.576397e+001 - 10.0, 1.570813e+001 - 10.0,
            4.056617e+001 - 10.0, 5.306525e+001 - 10.0, 1.804979e+001 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            5.000001e+001 - 10.0, 5.991932e+001 - 10.0, 1.804982e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            4.194254e+001 - 10.0, 6.109015e+001 - 10.0, 1.570818e+001 - 10.0,
            4.416958e+001 - 10.0, 4.197509e+001 - 10.0, 1.804978e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            5.000001e+001 - 10.0, 5.991932e+001 - 10.0, 1.804982e+001 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            5.583043e+001 - 10.0, 4.197509e+001 - 10.0, 1.804979e+001 - 10.0,
            5.000001e+001 - 10.0, 3.629182e+001 - 10.0, 1.570819e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            5.943383e+001 - 10.0, 5.306524e+001 - 10.0, 1.804981e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            5.805747e+001 - 10.0, 6.109014e+001 - 10.0, 1.570819e+001 - 10.0,
            4.311813e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            5.688189e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            5.000000e+001 - 10.0, 3.381961e+001 - 10.0, 1.618023e+001 - 10.0,
            6.113513e+001 - 10.0, 5.361802e+001 - 10.0, 1.894423e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            5.688189e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            6.538837e+001 - 10.0, 4.500005e+001 - 10.0, 1.618027e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            3.886489e+001 - 10.0, 5.361803e+001 - 10.0, 1.894422e+001 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            4.311813e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            3.461165e+001 - 10.0, 4.500008e+001 - 10.0, 1.618027e+001 - 10.0,
            5.000002e+001 - 10.0, 6.170817e+001 - 10.0, 1.894424e+001 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
            3.886489e+001 - 10.0, 5.361803e+001 - 10.0, 1.894422e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
            4.048950e+001 - 10.0, 6.309015e+001 - 10.0, 1.618028e+001 - 10.0,
            5.000002e+001 - 10.0, 6.170817e+001 - 10.0, 1.894424e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            6.113513e+001 - 10.0, 5.361802e+001 - 10.0, 1.894423e+001 - 10.0,
            5.951055e+001 - 10.0, 6.309014e+001 - 10.0, 1.618033e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            4.416958e+001 - 10.0, 4.197509e+001 - 10.0, 1.804978e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            5.583043e+001 - 10.0, 4.197509e+001 - 10.0, 1.804979e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            4.056617e+001 - 10.0, 5.306525e+001 - 10.0, 1.804979e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            5.943383e+001 - 10.0, 5.306524e+001 - 10.0, 1.804981e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            5.000001e+001 - 10.0, 5.991932e+001 - 10.0, 1.804982e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            4.311813e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            5.688189e+001 - 10.0, 4.052785e+001 - 10.0, 1.894420e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            3.886489e+001 - 10.0, 5.361803e+001 - 10.0, 1.894422e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
            6.113513e+001 - 10.0, 5.361802e+001 - 10.0, 1.894423e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            5.000002e+001 - 10.0, 6.170817e+001 - 10.0, 1.894424e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            5.000000e+001 - 10.0, 4.999997e+001 - 10.0, 2.418028e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            5.000000e+001 - 10.0, 4.999997e+001 - 10.0, 2.418028e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            5.000000e+001 - 10.0, 4.152782e+001 - 10.0, 2.418025e+001 - 10.0,
            5.000000e+001 - 10.0, 4.999997e+001 - 10.0, 2.418028e+001 - 10.0,
            4.194257e+001 - 10.0, 4.738196e+001 - 10.0, 2.418027e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            5.000000e+001 - 10.0, 4.999997e+001 - 10.0, 2.418028e+001 - 10.0,
            4.502024e+001 - 10.0, 5.685406e+001 - 10.0, 2.418030e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            5.000000e+001 - 10.0, 4.999997e+001 - 10.0, 2.418028e+001 - 10.0,
            5.497978e+001 - 10.0, 5.685406e+001 - 10.0, 2.418031e+001 - 10.0,
            5.805743e+001 - 10.0, 4.738196e+001 - 10.0, 2.418028e+001 - 10.0,
            5.000002e+001 - 10.0, 4.999997e+001 - 10.0, 2.618027e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            5.000002e+001 - 10.0, 4.999997e+001 - 10.0, 2.618027e+001 - 10.0,
            5.000003e+001 - 10.0, 3.999995e+001 - 10.0, 2.618024e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            5.000002e+001 - 10.0, 4.999997e+001 - 10.0, 2.618027e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
            4.048951e+001 - 10.0, 4.690981e+001 - 10.0, 2.618026e+001 - 10.0,
            5.000002e+001 - 10.0, 4.999997e+001 - 10.0, 2.618027e+001 - 10.0,
            5.951052e+001 - 10.0, 4.690983e+001 - 10.0, 2.618027e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            5.000002e+001 - 10.0, 4.999997e+001 - 10.0, 2.618027e+001 - 10.0,
            5.587783e+001 - 10.0, 5.809012e+001 - 10.0, 2.618031e+001 - 10.0,
            4.412221e+001 - 10.0, 5.809013e+001 - 10.0, 2.618029e+001 - 10.0,
        ];

        let aColor = [];
        // for (let i = 0; i < 1080; i++) {
        //     aColor.push(Math.random());
        // }

        let aIndex = [];

        let aNorm = [];

        for (let i = 0; i < aVert.length; i += 9) {
            let p0 = vec3(aVert[i], aVert[i + 1], aVert[i + 2]),
                p1 = vec3(aVert[i + 3], aVert[i + 4], aVert[i + 5]),
                p2 = vec3(aVert[i + 6], aVert[i + 7], aVert[i + 8]);

            let n = p1.sub(p0).cross(p2.sub(p0)).normalize();

            aNorm.push(...n.toArray());
            aNorm.push(...n.toArray());
            aNorm.push(...n.toArray());
        }

        aColor = aNorm;           

        let aUV = [];

        let mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aColor, aNorm, aUV, 3);
        mesh.noCulling = true;

        if (keepRawData) {
            mesh.aIndex = aIndex;
            mesh.aVert = aVert;
            mesh.aNorm = aNorm;
        }

        return mesh;
    }
};

primitivies.icosahedron = class icosahedron {
    static createModel(gl, name, keepRawData) {
        return model(primitivies.icosahedron.createMesh(gl, name || "icosahedron", 1, 1, 1, 0, 0, 0, keepRawData));
    }
    static createMesh(gl, name, radius, keepRawData) {
        let magicAngle = Math.PI * 26.565 /180;
        let segmentAngle = Math.PI * 72 / 180;
        let currentAngle = 0

        let v = [];
        for (let i = 0; i < 12; i++) {
            v.push([0, 0, 0]);
        }
        v[0] = [0, radius, 0];
        v[11] = [0, -radius, 0];
                
        for (var i = 1; i < 6; i++)
        {
            v[i] = [
                radius * Math.sin(currentAngle) * Math.cos(magicAngle),
                radius * Math.sin(magicAngle),
                radius * Math.cos(currentAngle) * Math.cos(magicAngle)];
            currentAngle += segmentAngle;
        }
        currentAngle = Math.PI * 36/180;
        for (var i = 6; i < 11; i++)
        {
            v[i] = [
                radius * Math.sin(currentAngle) * Math.cos(-magicAngle),
                radius * Math.sin(-magicAngle),
                radius * Math.cos(currentAngle) * Math.cos(-magicAngle)];
            currentAngle += segmentAngle;
        }

        let aVert = [
             ...v[0],  ...v[1],  ...v[2],
             ...v[0],  ...v[2],  ...v[3],
             ...v[0],  ...v[3],  ...v[4],
             ...v[0],  ...v[4],  ...v[5],
             ...v[0],  ...v[5],  ...v[1],

            ...v[11],  ...v[7],  ...v[6],
            ...v[11],  ...v[8],  ...v[7],
            ...v[11],  ...v[9],  ...v[8],
            ...v[11], ...v[10],  ...v[9],
            ...v[11],  ...v[6], ...v[10],

             ...v[2],  ...v[1],  ...v[6],
             ...v[3],  ...v[2],  ...v[7],
             ...v[4],  ...v[3],  ...v[8],
             ...v[5],  ...v[4],  ...v[9],
             ...v[1],  ...v[5], ...v[10],

             ...v[6],  ...v[7],  ...v[2],
             ...v[7],  ...v[8],  ...v[3],
             ...v[8],  ...v[9],  ...v[4],
             ...v[9], ...v[10],  ...v[5],
            ...v[10],  ...v[6],  ...v[1],
        ];

        let aColor = [
            ...v[0],  ...v[1],  ...v[2],
            ...v[0],  ...v[2],  ...v[3],
            ...v[0],  ...v[3],  ...v[4],
            ...v[0],  ...v[4],  ...v[5],
            ...v[0],  ...v[5],  ...v[1],

           ...v[11],  ...v[7],  ...v[6],
           ...v[11],  ...v[8],  ...v[7],
           ...v[11],  ...v[9],  ...v[8],
           ...v[11], ...v[10],  ...v[9],
           ...v[11],  ...v[6], ...v[10],

            ...v[2],  ...v[1],  ...v[6],
            ...v[3],  ...v[2],  ...v[7],
            ...v[4],  ...v[3],  ...v[8],
            ...v[5],  ...v[4],  ...v[9],
            ...v[1],  ...v[5], ...v[10],

            ...v[6],  ...v[7],  ...v[2],
            ...v[7],  ...v[8],  ...v[3],
            ...v[8],  ...v[9],  ...v[4],
            ...v[9], ...v[10],  ...v[5],
           ...v[10],  ...v[6],  ...v[1],
        ];

        let aIndex = [];

        let aNorm = [];

        let aUV = [];

        let mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aColor, aNorm, aUV, 3);
        mesh.noCulling = true;

        if (keepRawData) {
            mesh.aIndex = aIndex;
            mesh.aVert = aVert;
            mesh.aNorm = aNorm;
        }

        return mesh;
    }
};

primitivies.quad = class quad {
    static createModel(gl) {
        return model(this.createMesh(gl));
    }
    static createMesh(gl) {
        let aVert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0],
            aUV = [0, 0, 0, 1, 1, 1, 1, 0],
            aIndex = [0, 1, 2, 2, 3, 0];
        let mesh = gl.fCreateMeshVAO("quad", aIndex, aVert, null, aUV);
        mesh.noCulling = true;
        mesh.doBlending = true;
        return mesh;
    }
};

primitivies.multiQuad = class multiQuad {
    static createModel(gl) {
        return model(this.createMesh(gl));
    }
    static createMesh(gl) {
        let aIndex = [],
            aUV = [],
            aVert = [];

        for (let i = 0; i < 10; i++) {
            let size = 0.2 + 0.8 * Math.random(),
                half = size * 0.5,
                angle = Math.PI * 2 * Math.random(),
                dx = half * Math.cos(angle),
                dy = half * Math.sin(angle),
                x = -2.5 + Math.random() * 5,
                y = -2.5 + Math.random() * 5,
                z = 2.5 - Math.random() * 5,
                p = i * 4;

            aVert.push(x - dx, y + half, z - dy);
            aVert.push(x - dx, y - half, z - dy);
            aVert.push(x + dx, y - half, z + dy);
            aVert.push(x + dx, y + half, z + dy);

            aUV.push(0, 0, 0, 1, 1, 1, 1, 0);
            aIndex.push(p, p + 1, p + 2, p + 2, p + 3, p);
        }

        let mesh = gl.fCreateMeshVAO("multiQuad", aIndex, aVert, null, aUV);
        mesh.noCulling = true;
        mesh.doBlending = true;
        return mesh;
    }
};

primitivies.gridAxis = class gridAxis {
    static createModel(gl, incAxis) {
        return model(this.createMesh(gl, incAxis));
    }
    static createMesh(gl, incAxis) {
        let verts = [],
            size = 2,
            div = 10.0,
            step = size / div,
            half = size / 2;

        let p;
        for (let i = 0; i <= div; i++) {
            p = -half + i * step;
            verts.push(p);
            verts.push(0);
            verts.push(half);
            verts.push(0);

            verts.push(p);
            verts.push(0);
            verts.push(-half);
            verts.push(0);

            p = half - i * step;
            verts.push(-half);
            verts.push(0);
            verts.push(p);
            verts.push(0);

            verts.push(half);
            verts.push(0);
            verts.push(p);
            verts.push(0);
        }

        if (incAxis) {
            verts.push(-1.1);
            verts.push(0);
            verts.push(0);
            verts.push(1);

            verts.push(1.1);
            verts.push(0);
            verts.push(0);
            verts.push(1);

            verts.push(0);
            verts.push(-1.1);
            verts.push(0);
            verts.push(2);

            verts.push(0);
            verts.push(1.1);
            verts.push(0);
            verts.push(2);

            verts.push(0);
            verts.push(0);
            verts.push(-1.1);
            verts.push(3);

            verts.push(0);
            verts.push(0);
            verts.push(1.1);
            verts.push(3);
        }

        let attrColorLoc = 4,
            strideLen,
            mesh = {
                drawMode: gl.LINES,
                vao: gl.createVertexArray()
            };

        mesh.vertexComponentLen = 4;
        mesh.vertexCount = verts.length / mesh.vertexComponentLen;
        strideLen = Float32Array.BYTES_PER_ELEMENT * mesh.vertexComponentLen;

        mesh.bufVertices = gl.createBuffer();
        gl.bindVertexArray(mesh.vao);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.bufVertices);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts), gl.STATIC_DRAW);
        gl.enableVertexAttribArray(ATTR_POSITION_LOC);
        gl.enableVertexAttribArray(attrColorLoc);

        gl.vertexAttribPointer(ATTR_POSITION_LOC, 3, gl.FLOAT, false, strideLen, 0);

        gl.vertexAttribPointer(attrColorLoc, 1, gl.FLOAT, false, strideLen, Float32Array.BYTES_PER_ELEMENT * 3);

        gl.bindVertexArray(null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.mMeshCache["grid"] = mesh;
        return mesh;
    }
};

export { primitivies };